# Vamos a usar un esquema de Producer-Consumer para resolverlo





import multiprocessing
import time
import random





# Esta ser√≠a la funci√≥n del producer, actualizando la cola cuando llegue una imagen
def recibir_imagen(nombre, cola, lock):
    print(f"üì• {nombre} recibida")
    with lock: # Realmente no es necesario porque la cola es una estructura process-safe, entonces podr√≠a quitarlo sin problema 
        cola.put(nombre)
        print(f"üì§ {nombre} a√±adida a la cola")



# Esta ser√≠a la funci√≥n consumer
def procesar_imagen(nombre, cola, lock):
    recibir_imagen(nombre, cola, lock)

    for fase in range(1, 4):
        duracion = random.randint(1, 3)
        time.sleep(duracion)
        print(f"{nombre} termin√≥ fase {fase} en {duracion} segundos")

    print(f"‚úÖ {nombre} ha sido procesada y almacenada")




# Protegemos el c√≥digo para que esta parte de aqu√≠ no sufra un bucle de creaci√≥n infinita de procesos

if __name__ == '__main__':
    lock = multiprocessing.Lock()
    cola = multiprocessing.Queue()

    tiempo_limite = 20 # este tiempo se puede ajustar sin problema
    inicio = time.time()
    procesos = []
    contador = 1 # este contador llevar√° la cuenta de cuantos procesos se mandan



    while time.time() - inicio < tiempo_limite: # ponemos que se creen tantos procesos como puedan en un tiempo determinado
        nombre = f"Imagen {contador}"
        p = multiprocessing.Process(target=procesar_imagen, args=(nombre, cola, lock))
        p.start()
        procesos.append(p)
        print(f"üöÄ Lanzando {nombre}")
        contador += 1
        time.sleep(random.uniform(0.5, 2))  # Simular llegada irregular

    for p in procesos:
        p.join()




    print("\nüì¶ Im√°genes en la cola:") # imprimimos todas las imagenes que han llegado 
    while not cola.empty():
        print(f"- {cola.get()}")






"""
üõ∞Ô∏è SIMULADOR DE PROCESAMIENTO DE IM√ÅGENES EN PARALELO

üéØ OBJETIVO:
Simular un entorno distribuido donde se reciben im√°genes de forma continua
durante un tiempo limitado (20 segundos) y cada una es procesada en paralelo.
Cada imagen pasa por 3 fases de procesamiento y se guarda en una base de datos
compartida (representada con una cola).

‚ö†Ô∏è PROBLEMAS ENCONTRADOS Y SOLUCIONES:

1. ‚ùå Deadlock por uso de Barrier:
   Quer√≠amos usar una barrera para que los procesos se sincronizaran entre fases.
   Sin embargo, como los procesos se crean din√°micamente durante 20 segundos,
   no sab√≠amos cu√°ntos habr√≠a en total. Esto hac√≠a que muchos se quedaran esperando
   indefinidamente en la barrera sin que se completara nunca -> deadlock.

   ‚úÖ Soluci√≥n: eliminar la barrera. Dejar que cada proceso trabaje a su ritmo
   sin esperar a los dem√°s.

2. üîê Exclusi√≥n mutua:
   Varios procesos acceden a la base de datos (cola) al mismo tiempo. 
   Aunque `multiprocessing.Queue()` ya es segura entre procesos, hemos a√±adido
   un `Lock()` como medida extra de seguridad y para demostrar conocimiento
   de los mecanismos de sincronizaci√≥n.

3. üß† Divisi√≥n l√≥gica Producer-Consumer:
   La funci√≥n `recibir_imagen()` act√∫a como el productor: recibe la imagen
   y la guarda en la cola. La funci√≥n `procesar_imagen()` act√∫a como consumidor:
   procesa la imagen en 3 fases y confirma su almacenamiento.

4. ‚è±Ô∏è Control por tiempo:
   Usamos `time.time()` para limitar la creaci√≥n de procesos a 20 segundos exactos.
   Esto simula la recepci√≥n de im√°genes en tiempo real.
"""